# 1. JDBC 연동 , create database springweb2;
spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/springweb2
spring.datasource.username = root
spring.datasource.password = 1234

# 개발단계 , 배포 단계에서 아래 설정 생략
# 2. JPA DDL 자동 실행 , DDL : create(개발)/update(개발)/none(배포)/create-drop(서버종료시 테이블삭제)
spring.jpa.hibernate.ddl-auto = create-drop
# * 더미/샘플 데이터 , schema.sql 파일은 엔티티 생성하므로 필요없다. data.sql DML 가능하다.
# JPA 엔티티가 생성되기전에 data.sql 실행 하므로 불가능하다, 해결방안 : JPA가 엔티티 생성하고 data.sql 실행될수 있게 한다.
spring.sql.init.mode = always
#  JPA가 엔티티 생성하고 data.sql 실행될수 있게 한다.
spring.jpa.defer-datasource-initialization=true

# 3. JPA SQL console 출력
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql = true
# 4. JPA SQL console DML 매개변수 출력
logging.level.org.hibernate.SQL = DEBUG
logging.level.org.hibernate.orm.jdbc.bind = TRACE

# Redis : noSQL 사용하는 외부 Redis 연동
spring.redis.host=localhost
spring.redis.port=6379